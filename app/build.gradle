plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("ReleaseUnitTest")) {
        task.enabled = false
    }
}

jacoco {
    toolVersion = "0.8.7"
}

android {
    compileSdk 32

    defaultConfig {
        applicationId 'com.github.sdpsharelook'
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName '0.1'

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.github.sdpsharelook.MyTestRunner"
    }


    buildFeatures {
        viewBinding true
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true
        }

    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:29.3.1')
    def hilt = '2.41'

    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.core:core-ktx:1.7.0' // enable modern kotlin features
    implementation 'androidx.core:core-splashscreen:1.0.0-beta02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-testing:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.0'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation "com.google.dagger:hilt-android:$hilt"
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-functions'
    implementation 'com.google.mlkit:language-id:17.0.3'
    implementation 'com.google.mlkit:translate:17.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.0'
    implementation'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
    testImplementation 'androidx.test:core-ktx:1.4.0' // necessary for kotlin tests
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation "com.google.dagger:hilt-android-testing:$hilt"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
    testImplementation 'org.robolectric:robolectric:4.6' // add all test dependencies
    androidTestImplementation 'androidx.test:core-ktx:1.4.0' // necessary for kotlin tests
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt"
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.4.1'
    kapt "com.google.dagger:hilt-android-compiler:$hilt"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt"
}


configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
//    jacoco.excludes = ['jdk.internal.*']
    jacoco.excludes = ['*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // Exclude Hilt generated classes
            '**/*Hilt*.*',
            'hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_Factory**',
            '**/*_MembersInjector.class',
            '**/*_MembersInjector**'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec',
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}